#platform "pixxiLCD-39P4CT"

//#constant OLDCOMPILE





// generated 2/19/2023 3:05:54 PM
// uSDRequired:- 1   InternalRequired:- 1   InherentsInProgFlash:- 0   GciFlashFS:- 1   InherentWidgets:- 0   InternalObjects:- 14   GciFlashFiles:- 1


#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"


#inherit "SprinterGaugeConst.inc"

#inherit "CLPrintStringsGciFS.inc"

#constant IPDatasize 22

#CONST
    CMDLenMAX   80
    seroutX     $serout
    serinX      $serin
#END



#CONST
    ColorBGimage     0x0020
    ACK         0x06
    NAK         0x15
    ReadCmd     0x80
    WriteCmd    0x00
//  IPD_TYPE    0 // offsets are doubled as FLASH is byte addressable
    Ofs_IPD_P1      2
    Ofs_IPD_P2      4
    Ofs_IPD_P3      6
    Ofs_IPD_P4      8
    Ofs_IPD_P5      10
    Ofs_IPD_P6      12
    Ofs_IPD_P7      14
    Ofs_IPD_DOWN    16
    Ofs_IPD_RELEASE 18
    Ofs_IPD_OBJVIDX 20
// object indexes
    tDipSwitch      0
    tKnob           1
    tRockerSwitch   2
    tRotarySwitch   3
    tGSlider        4
    tTrackbar       5
    tWinButton      6
    tAngularmeter   7   // need to implement use of this, inputs must be ordered first
    tCoolgauge      8
    tCustomdigits   9
    tForm           10
    tGauge          11
    tImage          12
    tKeyboard       13  // this is a special input, does not need to be at front
    tLed            14
    tLeddigits      15
    tMeter          16
    tStrings        17  // also need output strings code
//    tStringUNI      0x3f | 0x40
//    tStringANSII    0x3f
    tThermometer    18
    tUserled        19
    tVideo          20
    tStaticText     21
// Remove, check for non visual objects instead
//    MaxVisObjects   21  // objects that have a visual component 
    tSounds         22
    tTimer          23
    tSpectrum       24
    tScope          25
    tTank           26
    tUserImages     27
    tPinOutput      28
    tPinInput       29 
    t4Dbutton       30    // more inputs 
    tAniButton      31
    tColorPicker    32 
    tUserButton     33     
    tMagicObject    34     
    tSmartGauge     35 
    tSmartSlider    36 
    tSmartKnob      37 
    tiLedDigitsH       38
    tiAngularMeter     39
    tiGauge            40 
    tiLabelB           41    // Ext
    tiUserGauge        42    // Ext
    tiMediaGauge       43    // Ext
    tiMediaThermometer 44    // Ext
    tiLed              45 
    tiMediaLed         46 
    tiLedDigits        47 
    tiNeedle           48 
    tiRuler            49 
    tiLedDigit         50 
    tiButtonD          51    // Input
    tiButtonE          52    // Input, Ext
    tiMediaButton      53    // Input, Ext
    tiToggleInput      54    // Input, Ext
    tiDial             55    // Input
    tiMediaRotary      56    // Input, Ext
    tiRotaryInput      57    // Input, Ext
    tiSwitch           58    // Input
    tiSwitchB          59    // Input, Ext
    tiSliderE          60    // Input
    tiMediaSlider      61    // Input, Ext
    tiSliderH          62    // Input, Ext
    tiSliderG          63    // Input, Ext
    tiSliderF          64    // Input, Ext
    tiSliderD          65    // Input, Ext
    tiSliderC          66    // Input, Ext
    tiLinearInput      67    // Input, Ext
// tiPanelB, tiScale, tiLabel(ext), have nothing 'settable', nece no object ids
    MaxTotObjects   67 // objects in objects array
    MaxIntObjects   27 // objects in Int objects array, excludes tiLedDigitsH which is the High word of LedDigits
//    OT_DISPLAY      22
    OT_REPORT       100
    OT_SETCONST     101
    OT_SETANOTHER   102
    OT_ACTIVATE     103
    OT_NEXTFRAME    104
    OT_PREVFRAME    105
    OT_NEXTSTRING   106
    OT_PREVSTRING   107
    OT_MAGIC        108
// other OT_s Form activate,
// Indexes into LedDigits and CustomDigits arrays
    Ofs_Digits_Left           0
    Ofs_Digits_Digits         2
    Ofs_Digits_MinDigits      4
    Ofs_Digits_Widthdigit     6
    Ofs_Digits_LeadingBlanks  8
// indexes to Strings arrays
    Ofs_String_StartH        0
    Ofs_String_StartL        2
    Ofs_String_Size          4
    Ofs_String_x1            6
    Ofs_String_y1            8
    Ofs_String_x2            10
    Ofs_String_y2            12
    Ofs_String_FGColor       14
    Ofs_String_BGColor       16
    Ofs_String_FontAttribs   18
    Ofs_String_Transparent   20 // bit transparent should 'refresh' background, otherwise rectangle out
    Ofs_String_Ansi          22 // bit defines write/draw routine
    Ofs_String_Form          24 // form this string can be seen in
    Ofs_String_GciFSFontIdx  26 // only used/exists for GciFS 
// Command codes
    READ_OBJ        0
    WRITE_OBJ       1
    WRITE_STR       2
    WRITE_STRU      3
    WRITE_CONTRAST  4
    REPORT_OBJ      5
    REPORT_EVENT    7
    WRITE_MAGIC_BYTES 8
    WRITE_MAGIC_DBYTES  9
    REPORT_MAGIC_EVENT_BYTES 10
    REPORT_MAGIC_EVENT_DBYTES 11
    WRITE_LABEL     12
// End P1.inc
    nObjects        26
    nInputs         27
    nAniTimers      0
    nStrings        33
#END

#DATA
    word gfxInternals gfx_AngularMeter, -1, -1, -1, -1, -1, -1, -1, gfx_LedDigits, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    word gfxIntParms -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    word gfxIntStrings -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    word oiviAngularMeter vIAngularMeter0, vIAngularMeter1, vIAngularMeter2, vIAngularMeter3
    word oiviLedDigits vILedDigits0, vILedDigits1, vILedDigits2, vILedDigits3, vILedDigits4, vILedDigits5, vILedDigits6, vILedDigits7, vILedDigits8, vILedDigits9
    word xobj2iobj 0x2700, 0x2701, 0x2F00, 0x2703, 0x2F01, 0x2F02, 0x2F03, 0x2702, 0x2F04, 0x2F06, 0x2F07, 0x2F08, 0x2F05, 0x2F09
    word IIAngularMeter0 60, 55, 30, 15, 0, 0, 10, -5, 2, GRAY, 320, 350,
        0x4228, 0xC620, RED, 1, 4, 1, WHITE, -15, LIAngularMeter0, 0x3, 2,
        0xBFB5, -15, -7, 0, 165, 9, 140, 122, 235, 70, BLACK, 135, 405, 0, 100,
        40, 0x5, 17, 4, 0, WHITESMOKE, 0, SLATEGRAY, 0, RED
    byte LIAngularMeter0 "",0, "",0, "",0, "",0, "",0
    word IIAngularMeter1 40, 35, 5, 15, 0, 0, 10, -5, 2, GRAY, 183, 227,
        0x4228, 0xC620, RED, 1, 3, 1, WHITE, -15, LIAngularMeter1, 0x3, 1,
        WHITESMOKE, -15, 0, 0, 105, 37, 100, 90, 155, 82, BLACK, 65, 280, 130,
        250, 32, 0x5, 17, 2, 0, WHITESMOKE, 0, SLATEGRAY, 0, RED
    byte LIAngularMeter1 "",0, "",0, "",0, "",0
    word IILedDigits0 224, 101, 26, 23, 2, -1, 0, 1, WHEAT, 0x18C3, 0x0
    word IIAngularMeter3 40, 35, 4, 5, 0, 0, 10, -5, 2, GRAY, 360, 360, 0x4228,
        0x4228, 0x4228, 1, 2, 1, WHITE, -15, LIAngularMeter3, 0x3, 1, 0xBFB5,
        -15, 0, 0, 265, 5, 95, 89, 312, 49, BLACK, 235, 450, 0, 22, 32, 0x5,
        17, 2, 0, WHITESMOKE, 0, SLATEGRAY, 0, RED
    byte LIAngularMeter3 "",0, "",0, "",0
    word IILedDigits1 135, 12, 39, 23, 3, -1, 0, 1, WHEAT, 0x18C3, 0x0
    word IILedDigits2 296, 102, 26, 23, 2, -1, 0, 1, WHEAT, 0x18C3, 0x0
    word IILedDigits3 4, 101, 26, 23, 2, -1, 0, 1, WHEAT, 0x18C3, 0x10
    word IIAngularMeter2 40, 35, 5, 15, 0, 0, 10, -5, 2, GRAY, 183, 227,
        0x4228, 0xC620, RED, 1, 3, 1, WHITE, -15, LIAngularMeter2, 0x3, 1,
        WHITESMOKE, -15, 0, 0, 41, 37, 100, 90, 91, 82, BLACK, 65, 280, 130,
        250, 32, 0x5, 17, 2, 0, WHITESMOKE, 0, SLATEGRAY, 0, RED
    byte LIAngularMeter2 "",0, "",0, "",0, "",0
    word IILedDigits4 80, 12, 39, 23, 3, -1, 0, 1, WHEAT, 0x18C3, 0x0
    word IILedDigits6 370, 12, 39, 23, 3, 1, 0, 1, WHEAT, 0x18C3, 0x0
    word IILedDigits7 370, 41, 39, 23, 3, -1, 0, 1, WHEAT, 0x18C3, 0x0
    word IILedDigits8 359, 70, 52, 23, 4, -1, 0, 1, WHEAT, 0x18C3, 0x0
    word IILedDigits5 340, 101, 26, 23, 2, 1, 0, 1, WHEAT, 0x18C3, 0x0
    word IILedDigits9 400, 101, 39, 23, 3, -1, 0, 1, WHEAT, 0x18C3, 0x0
    word FormStartIndex 0, 16, 18, 20, 25
    word FormEndIndex 16, 18, 20, 25, 26
    word iFormStartIndex 0, 14, 14, 14, 14
    word iFormEndIndex 14, 14, 14, 14, 14
    word InputControls -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 66, 132, 176, 242, 308, 374, 440, 484, 506, 528
    word InternalInputControls -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    word InputData tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 22, 4,
                OT_ACTIVATE, 10, 2, 0, 18, 0, 0, 0, 0, 44, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
                tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 88, 2,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 110, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 154, 6,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
                tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 198, 8,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 220, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 264, 18,
                OT_ACTIVATE, 10, 3, 0, 18, 0, 0, 0, 0, 286, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
                tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 330, 10,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 352, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 396, 12,
                OT_ACTIVATE, 10, 4, 0, 18, 0, 0, 0, 0, 418, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 462, 2,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 4,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 6,
                tUserButton, 1, -1, -1, -1, -1, -1, -1, 0, 550, 14,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 572, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    word iStrings0  Strings0StartH, Strings0StartL, Strings0Size, 250, 16, 389, 46, WHITE, BLACK, 0, 1, 1, 1, -1-iFontStrings2
    word iStrings1  Strings1StartH, Strings1StartL, Strings1Size, 327, 16, 466, 46, WHITE, BLACK, 0, 1, 1, 3, -1-iFontStrings2
    word iStrings2  Strings2StartH, Strings2StartL, Strings2Size, 250, 85, 435, 115, WHITE, BLACK, 0, 1, 1, 1, -1-iFontStrings2
    word iStrings3  Strings3StartH, Strings3StartL, Strings3Size, 12, 110, 64, 129, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings4  Strings4StartH, Strings4StartL, Strings4Size, 196, 16, 239, 46, WHEAT, BLACK, 0, 1, 1, 1, -1-iFontStrings2
    word iStrings5  Strings5StartH, Strings5StartL, Strings5Size, 172, 51, 237, 81, WHEAT, BLACK, 0, 1, 1, 1, -1-iFontStrings2
    word iStrings6  Strings6StartH, Strings6StartL, Strings6Size, 65, 110, 170, 129, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings7  Strings7StartH, Strings7StartL, Strings7Size, 250, 51, 393, 81, WHITE, BLACK, 0, 1, 1, 1, -1-iFontStrings2
    word iStrings8  Strings8StartH, Strings8StartL, Strings8Size, 327, 52, 466, 82, WHITE, BLACK, 0, 1, 1, 3, -1-iFontStrings2
    word iStrings9  Strings9StartH, Strings9StartL, Strings9Size, 188, 84, 232, 114, WHEAT, BLACK, 0, 1, 1, 1, -1-iFontStrings2
    word iStrings10  Strings10StartH, Strings10StartL, Strings10Size, 265, 110, 319, 129, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings11  Strings11StartH, Strings11StartL, Strings11Size, 325, 110, 464, 129, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings12  Strings12StartH, Strings12StartL, Strings12Size, 92, 4, 275, 34, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings2
    word iStrings13  Strings13StartH, Strings13StartL, Strings13Size, 288, 10, 319, 29, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings14  Strings14StartH, Strings14StartL, Strings14Size, 325, 10, 441, 29, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings15  Strings15StartH, Strings15StartL, Strings15Size, 65, 35, 164, 54, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings16  Strings16StartH, Strings16StartL, Strings16Size, 65, 60, 175, 79, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings17  Strings17StartH, Strings17StartL, Strings17Size, 12, 35, 64, 54, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings18  Strings18StartH, Strings18StartL, Strings18Size, 12, 60, 64, 79, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings19  Strings19StartH, Strings19StartL, Strings19Size, 12, 85, 64, 104, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings20  Strings20StartH, Strings20StartL, Strings20Size, 65, 85, 102, 104, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings21  Strings21StartH, Strings21StartL, Strings21Size, 300, 35, 321, 54, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings22  Strings22StartH, Strings22StartL, Strings22Size, 325, 35, 424, 54, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings23  Strings23StartH, Strings23StartL, Strings23Size, 284, 60, 318, 79, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings24  Strings24StartH, Strings24StartL, Strings24Size, 325, 60, 424, 79, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings25  Strings25StartH, Strings25StartL, Strings25Size, 284, 85, 318, 104, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings26  Strings26StartH, Strings26StartL, Strings26Size, 325, 85, 467, 104, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings27  Strings27StartH, Strings27StartL, Strings27Size, 105, 85, 126, 104, WHEAT, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings28  Strings28StartH, Strings28StartL, Strings28Size, 130, 85, 211, 104, WHITE, BLACK, 0, 1, 1, 2, -1-iFontStrings10
    word iStrings29  Strings29StartH, Strings29StartL, Strings29Size, 280, 52, 323, 82, WHEAT, BLACK, 0, 1, 1, 3, -1-iFontStrings2
    word iStrings30  Strings30StartH, Strings30StartL, Strings30Size, 260, 88, 325, 118, WHEAT, BLACK, 0, 1, 1, 3, -1-iFontStrings2
    word iStrings31  Strings31StartH, Strings31StartL, Strings31Size, 327, 88, 470, 118, WHITE, BLACK, 0, 1, 1, 3, -1-iFontStrings2
    word iStrings32  Strings32StartH, Strings32StartL, Strings32Size, 308, 16, 325, 46, WHEAT, BLACK, 0, 1, 1, 3, -1-iFontStrings2
    word oDipSwitchs 0
    word oWinButtons 3, iWinbutton0, iWinbutton1, iWinbutton2
    word oForms 5, -1, -1, -1, -1, -1
    word oGauges 4, iGauge0, iGauge1, iGauge2, iGauge3
    word oImages 11, iImage0, iImage1, -1, iImage3, iImage4, iImage5, iImage6, iImage7, iImage8, iImage9, iImage10
    word oLeds 1, iLed0
    word oStringss 33, iStrings0, iStrings1, iStrings2, iStrings3, iStrings4, iStrings5, iStrings6, iStrings7, iStrings8, iStrings9, iStrings10, iStrings11, iStrings12, iStrings13, iStrings14, iStrings15, iStrings16, iStrings17, iStrings18, iStrings19, iStrings20, iStrings21,
                    iStrings22, iStrings23, iStrings24, iStrings25, iStrings26, iStrings27, iStrings28, iStrings29, iStrings30, iStrings31, iStrings32
    word oUserButtons 9, iUserbutton0, iUserbutton1, iUserbutton2, iUserbutton3, iUserbutton4, iUserbutton5, iUserbutton6, -1, iUserbutton8
    word oiAngularMeters 4, IIAngularMeter0, IIAngularMeter1, IIAngularMeter2, IIAngularMeter3
    word oiLedDigitss 10, IILedDigits0, IILedDigits1, IILedDigits2, IILedDigits3, IILedDigits4, IILedDigits5, IILedDigits6, IILedDigits7, IILedDigits8, IILedDigits9
    word FormBGcolors 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
    word kKeyboardKeystrokes -1
    word rKeyboardRoutines -1
#END

    var vIAngularMeter0[WIDGET_RAM_SPACE] ;
    var vIAngularMeter1[WIDGET_RAM_SPACE] ;
    var vILedDigits0[WIDGET_RAM_SPACE+2] ;
    var vIAngularMeter3[WIDGET_RAM_SPACE] ;
    var vILedDigits1[WIDGET_RAM_SPACE+2] ;
    var vILedDigits2[WIDGET_RAM_SPACE+2] ;
    var vILedDigits3[WIDGET_RAM_SPACE+2] ;
    var vIAngularMeter2[WIDGET_RAM_SPACE] ;
    var vILedDigits4[WIDGET_RAM_SPACE+2] ;
    var vILedDigits6[WIDGET_RAM_SPACE+2] ;
    var vILedDigits7[WIDGET_RAM_SPACE+2] ;
    var vILedDigits8[WIDGET_RAM_SPACE+2] ;
    var vILedDigits5[WIDGET_RAM_SPACE+2] ;
    var vILedDigits9[WIDGET_RAM_SPACE+2] ;
var stringsCV[33] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
// Start P2.inc
var vObjects[MaxIntObjects+1] ;              // address of RAM objects
var GObjectIdx, GObjectFunc, GObjectRAM, GObjectDATA, GObjectParms, GObjectStrings ;
var oObjects[MaxTotObjects+1] ;                 // address of objects
var CurrentForm, oldn, ImageTouched ;
var TouchXpos, TouchYpos ;
var GObjectType, TouchState, CurInputData, pInputIndex ;
var comRX[40], cmd[CMDLenMAX] ;

var InputCS, OutputCS ;

// > ? Constant/Global/Data ? <

func addressInternalWidget(var idx var iponly)
    var i, j ;
//to(COM0) ; print("Address Int ", idx, " ") ; pause(2) ;
    GObjectIdx := xobj2iobj[idx] ;
    GObjectType := (GObjectIdx>>8) ;                          // extract object type
    i := oObjects[GObjectType] ;                              // i is address of list of all objects of this type
    GObjectIdx &= 0xff ;
    //GObjectIdx *= 2 ;
    j := GObjectIdx * 2 ;
    GObjectDATA := i[j + 2] ;                                 // address of this object
    i := vObjects[GObjectType-tiAngularMeter] ;               // i is address of list of all ram objects of his type
    GObjectRAM := i[j] ;                                      // address of this objects' ram
    i := GObjectType-tiAngularMeter ;
    GObjectFunc := gfxInternals[i] ; // address function
    GObjectParms := gfxIntParms[i] ;
    GObjectStrings := gfxIntStrings[i] ;
//to(COM0) ; print([HEX4] GObjectFunc, " ", [HEX4] GObjectRAM, " ", [HEX4] GObjectDATA, " ", GObjectType, " ", GObjectIdx, "\r\n") ;
//    GObjectFunc(0, GObjectRAM, GObjectDATA) ;
endfunc

func seroutCS(var op)
    serout(op) ;
    OutputCS ^= op ;
endfunc

func nak0()
    serout(NAK) ;
    InputCS := 0 ;
endfunc

func seroutOcs()
    serout(OutputCS) ;
    OutputCS := 0 ;
endfunc

func SendReport(var id, var objt, var objn, var val)
    seroutCS(id) ;
    seroutCS(objt) ;
    seroutCS(objn) ;
    seroutCS(val >> 8) ; // first 8 bits
    seroutCS(val) ;
    seroutOcs() ;
endfunc


func ReadObject(var ObjectType, var ObjectIdx)
    var j, k, Objects ;
    if ((ObjectType >= tiLedDigitsH) && (ObjectType <= tiLinearInput))
        j := ObjectIdx *2 ;
        k := vObjects[ObjectType-tiAngularMeter] ;               // k is address of list of all ram objects of his type
        k := k[j] ;                                              // k is address of this objects' ram
        if (ObjectType == tiLedDigit)
            k := k[0] ;
        else 
            k := k[WIDGET_VAL1] ;
        endif
//gfx_MoveTo(0,0); txt_Opacity(OPAQUE) ; print(ObjectType, " ", ObjectIdx, " ", k," ") ;
    else
    Objects := *(oObjects+ObjectType) ;

    j := 2 + ObjectIdx * 2 + Objects ;
     if (ObjectType == tForm)
        k := CurrentForm ;
    else if (ObjectType == tStrings)
        k := stringsCV[ObjectIdx];
        else
        k := img_GetWord(hndl, *j, IMAGE_INDEX);
        if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
                                                                                                                                                    // determine if button is momentary or not which is needed for correct answer.
    endif
    endif
    SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
endfunc

var wp ;


func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
    var i, j, k, Objects ;
//    ObjectType &= 0x3f ; Why was his there? Anibuttons? Complex cascades?
    if (ObjectType == tForm)
        ActivateForm(ObjectIdx) ;
        return ;
    endif
    Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
    i := *(Objects) ;
    if ((ObjectType >= tiAngularMeter) && (ObjectType <= tiLinearInput))
        i := oObjects[ObjectType] ;                              // f is address of list of all objects of this type
        j := ObjectIdx *2 ;
        i := i[j + 2] ;                         // f is address of this object
        k := vObjects[ObjectType-tiAngularMeter] ;               // a is address of list of all ram objects of his type
        k := k[j] ;                             // a is address of this objects' ram
            j := ObjectType-tiAngularMeter ;
            Objects := gfxInternals[j] ;           // locate function address   
            Objects(NewVal, k, i) ; 
        return ;
    endif
    switch (ObjectType)
        case tWinButton :
            j := InputControls[oWinButtons[ObjectIdx+1]] ;
            break ;
        case tUserButton :
            j := InputControls[oUserButtons[ObjectIdx+1]] ;
            break ;
        default : j := -1 ;
    endswitch

    if (j != -1)
        k := img_GetWord(hndl, i , IMAGE_INDEX) ;
            NewVal := NewVal << 1 ;
            if (OVF())      // button group index change
                if (*(j+InputData+Ofs_IPD_P1))
                    k &= 1 ;    // mask off old group index for momentary
                else
                    k &= 3 ;    // mask off old group index for toggle
                endif
            else            // normal set
                if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
                k &= 0xfffc ;    // retain only group index for state set
            endif
            NewVal |= k ;
//        endif
        endif

        if (ObjectType == tStrings)
            PrintStrings(ObjectIdx, NewVal, 0);
            return ;
        endif
    img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
    img_Show(hndl, i) ; // will only display if form is current
    return ; // compiler bug circumvention!
endfunc

func TurnOffButtons(var group)
    var j, k, l, m, n, o, p;
    m := GObjectIdx ;     // save as will be clobbered
    n := GObjectType ;     // save as will be clobbered
    for (j := 0; j < nInputs; j++)
        k := j*IPDatasize ;
        if (*(InputData+k+Ofs_IPD_P2) == group)
            l := -1 ;
             if (*(InputData+k) == tWinButton)
                l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
                img_SetWord(hndl, l, IMAGE_INDEX, 0);
                img_Show(hndl, l);      // only shows on current form

            else if (*(InputData+k) == tUserButton)
                l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
                img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
                img_Show(hndl, l);      // only shows on current form
            endif
        endif
    next
    GObjectIdx := m ;     // Restore
    GObjectType := n ;    // Restore
endfunc




func ActivateForm(var newform)
    var i, j, *p ;

        widget_Disable(wp, ALL) ;
    if (CurrentForm != -1) // deactivate old form, by disabling all inputs
        for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
            if (img_GetWord(hndl, i, IMAGE_TAG))
                img_Disable(hndl,i) ;
            endif
        next
    endif
    CurrentForm := newform ;
    // display newform image or clear to image color
    if (FormBGcolors[CurrentForm] != ColorBGimage)
        gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
        gfx_Cls() ;
        DoGFXObjects() ;                                    // display GFX 'widgets'
    endif

    // enable inputs
    for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
        j := img_GetWord(hndl, i, IMAGE_TAG) ;
        if (j)
            j-- ;
            img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
            //if (j != tKeyboard)
            if (((j <= tWinButton) || (j >= t4Dbutton)) && (j != tSmartGauge) )               // enable inputs
                img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
            endif
            img_Show(hndl,i) ; // show initialy, if required
            if (j == tForm)
                DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
            endif
        endif
    next

    // enable inputs
       var a, f ; 
/*print("oiviAngularMeter ", [HEX4] oiviAngularMeter, " ", oiviAngularMeter[0], " ", [HEX4]vIAngularMeter0, "\n") ;
print("oiviGauge ", [HEX4] oiviGauge, " ", [HEX4] oiviGauge[0], " ", [HEX4] vIGauge0, "\n") ;
print("oiviButtonD ", [HEX4] oiviButtonD, " ", [HEX4] oiviButtonD[0], " ", [HEX4] vIButtonD0, "\n") ;
print("vIAngularMeter0 ", [HEX4] vIAngularMeter0, "\n") ;
print("vIButtonD0 ", [HEX4] vIButtonD0, "\n") ;
print("vIGauge0 ", [HEX4] vIGauge0, "\n") ;
print("IIAngularMeter0 ", [HEX4] IIAngularMeter0, "\n") ;
print("IIButtonD0 ", [HEX4] IIButtonD0, "\n") ;
print("IIGauge0 ", [HEX4] IIGauge0, "\n") ;
print([HEX4] gfxInternals, " ", [HEX4] gfx_AngularMeter, " ", [HEX4] gfx_Gauge, " ", [HEX4] gfx_Button4, "\n") ;
*/
    for (i := iFormStartIndex[CurrentForm]; i < iFormEndIndex[CurrentForm]; i++)
        addressInternalWidget(i, 0) ;
        widget_Enable(wp,i) ;
        if (GObjectType != tiLabelB) widget_ClearAttributes(wp,i,WIDGET_F_INITIALISED) ; // don't clear initialised for tiLabelB
                j := GObjectRAM[WIDGET_VAL1] ;
                GObjectFunc(j, GObjectRAM, GObjectDATA) ; 
    next
    for (i := iFormStartIndex[CurrentForm]; i < iFormEndIndex[CurrentForm]; i++)
        if (InternalInputControls[i] != -1)
            widget_SetAttributes(wp,i,WIDGET_F_TOUCH_ENABLE) ;
        endif
    next

    for (i := 0; i < nStrings; i++)
        if (stringsCV[i] != -1)
            WriteObject(tStrings, i, stringsCV[i]) ;
        endif
    next

endfunc

func UpdateObjects(var newval)
    var IPidx, otherOBJ, oldvalue ;
    if (GObjectType < tiLedDigitsH)
        oldvalue := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ;
    else
        oldvalue := GObjectRAM[WIDGET_VAL1] ;
    endif
    if ( ( oldvalue != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release

    if (GObjectType < tiLedDigitsH)
        img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
            img_Show(hndl, *(pInputIndex));      // only shows on current form
    else
        WriteObject(GObjectType, GObjectIdx, newval) ;
    endif
        if ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))
            if (*(CurInputData+Ofs_IPD_P1))
                newval &= 1;
            else
                newval &= 3;
            endif
            if (newval > 1) newval := 1;
        endif
        IPidx := *(CurInputData+TouchState) ;
        while(IPidx != 0)
            otherOBJ := IPidx + InputData;
            if (*(otherOBJ) == OT_REPORT)
                SendReport(REPORT_EVENT, GObjectType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
            else if (*(otherOBJ) == OT_MAGIC)
                IPidx := *(otherOBJ+Ofs_IPD_P5) ;
                IPidx(newval) ;
//            else if (TouchState == *(otherOBJ+Ofs_IPD_P4))  // test prior to Workshop 6.5.0.0
            else if ((TouchState == *(otherOBJ+Ofs_IPD_P4)) || (*(CurInputData+Ofs_IPD_P1) && ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))))
                if (*(otherOBJ) == OT_ACTIVATE)
                    ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
                    GObjectType := tForm ;
                else if (*(otherOBJ) == OT_SETCONST)
                    newval := *(otherOBJ+Ofs_IPD_P3) ;
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_SETANOTHER)
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_PREVFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                else if (*(otherOBJ) == OT_NEXTFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                else if (*(otherOBJ) == OT_PREVSTRING)
                    if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
                        WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
                    endif
                else if (*(otherOBJ) == OT_NEXTSTRING)
                    if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
                        WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
                    endif
                endif
            endif
            IPidx := *(otherOBJ+TouchState) ;
        wend
    endif
endfunc

// End P2.inc
func DoGFXObjects()
endfunc

// Start P3.inc
func main()
    var comTX[50], cmdi, i, j, TouchStatus ;


    gfx_ScreenMode(LANDSCAPE) ;

    media_InitFlash(FLASH_ADDR_DEF_COMMAND) ;


//    gfx_MoveTo(0, 0);
//    print(mem_Heap()," ") ;
//    gfx_TransparentColour(0x0020);
//    gfx_Transparency(ON);


    // open image control
    hndl := file_LoadImageControl(0, 0, 3);

    // init 'constants'
// End P3.inc

    oObjects[tDipSwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tKnob] := oDipSwitchs ; // dummy as no object there
    oObjects[tRockerSwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tRotarySwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tGSlider] := oDipSwitchs ; // dummy as no object there
    oObjects[tTrackbar] := oDipSwitchs ; // dummy as no object there
    oObjects[tWinButton] := oWinButtons ;
    oObjects[tAngularmeter] := oDipSwitchs ; // dummy as no object there
    oObjects[tCoolgauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tCustomdigits] := oDipSwitchs ; // dummy as no object there
    oObjects[tForm] := oForms ;
    oObjects[tGauge] := oGauges ;
    oObjects[tImage] := oImages ;
    oObjects[tKeyboard] := oDipSwitchs ; // dummy as no object there
    oObjects[tLed] := oLeds ;
    oObjects[tLeddigits] := oDipSwitchs ; // dummy as no object there
    oObjects[tMeter] := oDipSwitchs ; // dummy as no object there
    oObjects[tStrings] := oStringss ;
    oObjects[tThermometer] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserled] := oDipSwitchs ; // dummy as no object there
    oObjects[tVideo] := oDipSwitchs ; // dummy as no object there
    oObjects[tStaticText] := oDipSwitchs ; // dummy as no object there
    oObjects[tSounds] := oDipSwitchs ; // dummy as no object there
    oObjects[tTimer] := oDipSwitchs ; // dummy as no object there
    oObjects[tSpectrum] := oDipSwitchs ; // dummy as no object there
    oObjects[tTank] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserImages] := oDipSwitchs ; // dummy as no object there
    oObjects[tPinOutput] := oDipSwitchs ; // dummy as no object there
    oObjects[tPinInput] := oDipSwitchs ; // dummy as no object there
    oObjects[t4Dbutton] := oDipSwitchs ; // dummy as no object there
    oObjects[tAniButton] := oDipSwitchs ; // dummy as no object there
    oObjects[tColorPicker] := oDipSwitchs ; // dummy as no object there
    oObjects[tUserButton] := oUserButtons ;
    oObjects[tMagicObject] := oDipSwitchs ; // dummy as no object there
    oObjects[tSmartGauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tSmartSlider] := oDipSwitchs ; // dummy as no object there
    oObjects[tSmartKnob] := oDipSwitchs ; // dummy as no object there
    oObjects[tiLedDigitsH] := oDipSwitchs ; // dummy as no object there
    oObjects[tiAngularMeter] := oiAngularMeters ;
    oObjects[tiGauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tiLabelB] := oDipSwitchs ; // dummy as no object there
    oObjects[tiUserGauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tiMediaGauge] := oDipSwitchs ; // dummy as no object there
    oObjects[tiMediaThermometer] := oDipSwitchs ; // dummy as no object there
    oObjects[tiLed] := oDipSwitchs ; // dummy as no object there
    oObjects[tiMediaLed] := oDipSwitchs ; // dummy as no object there
    oObjects[tiLedDigits] := oiLedDigitss ;
    oObjects[tiNeedle] := oDipSwitchs ; // dummy as no object there
    oObjects[tiRuler] := oDipSwitchs ; // dummy as no object there
    oObjects[tiLedDigit] := oDipSwitchs ; // dummy as no object there
    oObjects[tiButtonD] := oDipSwitchs ; // dummy as no object there
    oObjects[tiButtonE] := oDipSwitchs ; // dummy as no object there
    oObjects[tiMediaButton] := oDipSwitchs ; // dummy as no object there
    oObjects[tiToggleInput] := oDipSwitchs ; // dummy as no object there
    oObjects[tiDial] := oDipSwitchs ; // dummy as no object there
    oObjects[tiMediaRotary] := oDipSwitchs ; // dummy as no object there
    oObjects[tiRotaryInput] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSwitch] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSwitchB] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSliderE] := oDipSwitchs ; // dummy as no object there
    oObjects[tiMediaSlider] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSliderH] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSliderG] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSliderF] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSliderD] := oDipSwitchs ; // dummy as no object there
    oObjects[tiSliderC] := oDipSwitchs ; // dummy as no object there
    oObjects[tiLinearInput] := oDipSwitchs ; // dummy as no object there
    vObjects[0] := oiviAngularMeter ;
    vObjects[8] := oiviLedDigits ;
// Start P4.inc
    wp := widget_Create(14) ;
    for (i := 0; i < 14; i++)
	addressInternalWidget(i, 0) ;
        if (GObjectType != tiLedDigit) widget_Add(wp, i, GObjectRAM) ;    // don't add tiLedDigit objects as they are only 1 word long
    next

    // init comms
    com_Init(comRX,CMDLenMAX,0);
    com_SetBaud(COM0,19886);
    com_TXbuffer(comTX, 100, 0);
    // tag 'real' objects
    for (i := 0; i <= MaxTotObjects; i++)
        if (   (i != tSounds)
            && (i != tTimer)
            && (i != tPinOutput)
            && (i != tMagicObject)
            && (i != tPinInput) )
            TouchXpos := oObjects[i] ;
            TouchYpos := *(TouchXpos) ;
            for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
                oldn := *(TouchXpos+ImageTouched*2) ;
                img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
                if (oldn != -1)
                    img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
                    img_Disable(hndl, oldn) ;
                endif
            next
        endif
    next

    // display initial form
    CurrentForm := -1 ;
// End P4.inc
// Start P5.inc
    ActivateForm(0) ; // need to change this according to first actual form

// End P5.inc
// Start P6.inc px44
    touch_Set(TOUCH_ENABLE);                            // enable the touch screen
    oldn := -1 ;
    repeat

        // check comms for command, how to NAK invalid command
        if (com_Count() != 0)
            i := serin() ;
            InputCS ^= i ;               // update checksum
            if (   (cmdi > 2)
                && (cmd[0] == WRITE_STRU) )
                j := (cmdi-1) >> 1 + 2 ;
                if (j == CMDLenMAX)    // max length exceeded
                    nak0() ;
                    cmdi := -1 ;
                else if (cmdi & 1)
                    cmd[j] := i ;
                    if (cmd[2] == 0)    // if string complete
                        if (InputCS)
                            nak0() ;
                        else
                            if (cmd[0] == WRITE_STRU)
                            cmd[j] := 0 ;                     // terminate it
                            PrintStrings(cmd[1], &cmd[3], 1) ;
                            serout(ACK) ;
                            else
                            endif
                        endif
                        cmdi := -1 ;
                    endif
                else
                    cmd[j] := cmd[j] << 8 + i ;
                    cmd[2]-- ;          // dec length
                endif
                cmdi++ ;
            else // not unicode string
                cmd[cmdi++] := i ;
                 if ((cmd[0] == WRITE_STR) || (cmd[0] == WRITE_LABEL) )                  // Ansi String or Label
                    if (cmdi == CMDLenMAX)      // max length exceeded
                        nak0() ;
                        cmdi := 0 ;
                    else if (cmdi > 2)
                        if (cmd[2] == -1)
                            if (InputCS)
                                nak0() ;
                            else
                                if ((cmd[0] == WRITE_STR) || (cmd[0] == WRITE_LABEL))
                                cmd[cmdi-1] := 0 ;                     // terminate it
                                PrintStrings(cmd[1], &cmd[3], 1) ;
                                serout(ACK) ;
                                else
                                endif
                            endif
                            cmdi := 0 ;
                        else
                            cmd[2]-- ;          // dec length
                        endif
                    endif
                else if (   (cmd[0] == READ_OBJ)
                         && (cmdi == 4)         )
                    if (InputCS)
                        nak0() ;
                    else
                        ReadObject(cmd[1], cmd[2]) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
                         && (cmdi == 6)          )
                    if (InputCS)
                        nak0() ;
                    else
                        WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_CONTRAST)
                         && (cmdi == 3)         )
                    if (InputCS)
                        nak0() ;
                    else
                        gfx_Contrast(cmd[1]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
                    nak0() ;
                    cmdi := 0 ;
                endif
            endif   // not unicode string
        endif   // a character is available


    // touch code processing

        TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
        if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
            ImageTouched := img_Touched(hndl,-1) ;
            if (ImageTouched == -1)
                ImageTouched := widget_Touched(wp, ALL) ;
                if (ImageTouched != -1) ImageTouched := -2 - ImageTouched ;
            endif
            if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
                TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
            endif
            if (TouchStatus != TOUCH_RELEASED)        // if not released
                if (oldn != -1)
                    ImageTouched := oldn ;
                else
                    if (oldn != ImageTouched)
                oldn := ImageTouched ;
                        TouchStatus := TOUCH_PRESSED ;
                    endif
                endif
                TouchXpos  := touch_Get(TOUCH_GETX);
                TouchYpos  := touch_Get(TOUCH_GETY);
                TouchState := Ofs_IPD_DOWN ;
            else
                ImageTouched := oldn ;                     // simulate release of what we touched
                oldn := -1 ;                    // prevent double release
                TouchState := Ofs_IPD_RELEASE ;
            endif
            if (TouchStatus == TOUCH_PRESSED)
#inherit "MagicTouch.inc"
            endif
            if (ImageTouched >= 0)
                        CurInputData := InputControls[ImageTouched] + InputData;
                        GObjectType := *(CurInputData) ;
                        if (GObjectType == tSmartSlider)
                            i := tTrackbar ; // GSlider ;
                        else if (GObjectType == tSmartKnob)
                            i := tKnob ;
                        else if (GObjectType >= t4Dbutton) 
                            i := GObjectType - 23 ; // adjust to ensure next in gosub
                        else 
                            i := GObjectType ;
                        endif
                        gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
                        ImageTouched := -1 ; // show processed here
            endif
            if (ImageTouched != -1) ImageTouched := -2 - ImageTouched ;
            if (ImageTouched >= 0)
//print(ImageTouched," ") ;
//                        CurInputData := InternalInputControls[ImageTouched] + InternalInputData;
                        CurInputData := InternalInputControls[ImageTouched] + InputData;
//                        GObjectType := *(CurInputData) ;
//                        i := GObjectType ;
//                        if (GObjectType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
//                        gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
                        addressInternalWidget(ImageTouched, 0) ;
//                        i := xobj2iiobj[ImageTouched] ;                            // address object type and hash from ram index
//                        GObjectIdx := i & 0xff ;
//                        GObjectType := (i>>8) ;                                   // extract object type
                        if (GObjectType <= tiToggleInput) 
                            i := 0 ;
                        else if (GObjectType <= tiRotaryInput) 
                            i := 1 ;
                        else if (GObjectType <= tiSwitchB) 
                            i := 2 ;
                        else 
                            i := 3 ;
                        endif
//to(COM0) ; print(i, "\r\n") ;  

                        gosub (i), (ciButton, ciDial, ciSwitch, ciSlider) ;


//            ImageTouched := widget_Touched(wp, ALL) ;
            endif
        endif
 //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it

        sys_EventsResume() ;
    forever

ciSwitch:
cDipswitch:

cKnob:
ciDial:

cRockerswitch:

cRotaryswitch:

cSlider:
cTrackbar:
ciSlider:

ciButton:

c4DButton:
cUserButton:
cWinbutton:
    pInputIndex := oObjects[GObjectType]  + *(CurInputData+Ofs_IPD_OBJVIDX) ;
    i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
CommonButtons:
    if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
        if (TouchStatus == TOUCH_RELEASED)
            i &= 0xfffe ;
            TouchState == Ofs_IPD_DOWN ;
        else
            i |= 1 ;
            TouchState == Ofs_IPD_RELEASE ;
        endif
    else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
        if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
            if ((i & 3) == 3)
                i &= 0xfffc ;
            else
                i++ ;
            endif
        else
            i |= 1 ;                                      // make down regardless of current state
        endif
    else                        // group action, up all other buttons on touch press, reports 0 for button down
        if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
            TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
        endif
        if (GObjectType < tiLedDigits)
            i := (i & 0xfffc) | 2 ;         // uSD button, four, grouping and blocking states
        else
            i := 1 ;                        // Internal button two states
        endif
    endif

    UpdateObjects(i) ;
endsub ;

cAniButton:

cColorPicker:

endfunc
// End P6.inc
